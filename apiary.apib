FORMAT: 1A
HOST: https://everytoolsapi-henrique-coder.koyeb.app/api/v2/

# EveryTools API
Welcome to the EveryTools API. Where you can find all the tools you need in one place.

## Advanced Text Counter [/advanced-text-counter/?query={query}]
Count the number of characters, words, and many other elements in a text.
- Rate limiting: 5/second; 300/minute; 1000000/day
- Cache duration: 1 second(s)

+ Parameters
  + query (string) - Text to be analyzed.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "letters": {
              "characters": "dict",
              "total": "integer"
            },
            "lowercase": {
              "characters": "dict",
              "total": "integer"
            },
            "numbers": {
              "characters": "dict",
              "total": "integer"
            },
            "otherSymbols": {
              "characters": "dict",
              "total": "integer"
            },
            "spaces": "integer",
            "uppercase": {
              "characters": "dict",
              "total": "integer"
            },
            "words": {
              "characters": "dict",
              "total": "integer"
            }
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## E-Mail Address Parser [/email-parser/?query={query}]
Parse e-mail address to get user and domain information.
- Rate limiting: 10/second; 300/minute; 1000000/day
- Cache duration: 1 second(s)

+ Parameters
  + query (string) - E-mail address to be parsed.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "domain": "string",
            "user": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## FFprobe a Video URL [/ffprobe-a-video-url/?query={query}]
Analyze a video URL using FFprobe to get its metadata.
- Rate limiting: 2/second; 120/minute; 500000/day
- Cache duration: 3600 second(s)

+ Parameters
  + query (string) - Video URL to be analyzed.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "format": "dict",
            "streams": "list"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## Google Search Results Scraper [/scrap-google-search-results/?query={query}&max_results={max_results}]
Scrapes Google search results for a given query.
- Rate limiting: 1/second; 30/minute; 500000/day
- Cache duration: 300 second(s)

+ Parameters
  + query (string) - Search query.


  + max_results (integer, optional) - Maximum number of results to be returned (default: 10, min: 1, max: 50).

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "searchResults": "list"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## Instagram Reels URL Scraper [/scrap-instagram-reels-url/?query={query}]
Scrapes Instagram Reels URL to get the media URL and thumbnail URL.
- Rate limiting: 2/second; 60/minute; 500000/day
- Cache duration: 14400 second(s)

+ Parameters
  + query (string) - Instagram Reels URL.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "filename": "string",
            "mediaUrl": "string",
            "thumbnailUrl": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## My IP Address [/my-ip/?]
Get your IP address.
- Rate limiting: 4/second; 120/minute; 500000/day
- Cache duration: 1 second(s)

+ Parameters
## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "originIpAddress": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## Retrieve Latest FFmpeg Download URL [/get-latest-ffmpeg-download-url/?os={os}&arch={arch}&license={license}&shared={shared}]
Get the download url of the latest FFmpeg build according to your specifications.
- Rate limiting: 2/second; 60/minute; 500000/day
- Cache duration: 7200 second(s)

+ Parameters
  + os (string, optional) - Operating system (options: "windows", "linux").


  + arch (string, optional) - Architecture (options: "amd32", "amd64", "arm32", "arm64").


  + license (string, optional) - License type (options: "gpl", "lgpl").


  + shared (boolean, optional) - Whether the FFmpeg build is shared or not (options: "true", "false").

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "matchedBuilds": "list"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## Retrieve YouTube Video URL from Search [/get-youtube-video-url-from-search/?query={query}]
Get the YouTube video URL from a search query.
- Rate limiting: 4/second; 120/minute; 500000/day
- Cache duration: 300 second(s)

+ Parameters
  + query (string) - Search query.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "foundUrlData": {
              "channelId": "string",
              "channelName": "string",
              "channelUrl": "string",
              "formattedChannelName": "string",
              "formattedMediaTitle": "string",
              "mediaEmbedUrl": "string",
              "mediaId": "string",
              "mediaShortUrl": "string",
              "mediaTitle": "string",
              "mediaUrl": "string",
              "thumbnailUrls": "list",
              "viewCount": "integer"
            }
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## Seconds to HH:MM:SS format Converter [/seconds-to-hh:mm:ss-format-converter/?query={query}]
Convert seconds to HH:MM:SS format.
- Rate limiting: 10/second; 300/minute; 1000000/day
- Cache duration: 1 second(s)

+ Parameters
  + query (integer) - Seconds to be converted.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "hmsString": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## Text Language Detector [/text-language-detector/?query={query}]
Detects the predominant language in a text.
- Rate limiting: 4/second; 120/minute; 500000/day
- Cache duration: 1800 second(s)

+ Parameters
  + query (string) - Text to be analyzed.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "detectedLangCode": "string",
            "detectedLangName": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## Text Translator [/text-translator/?query={query}&src_lang={src_lang}&dest_lang={dest_lang}]
Translate text from one language to another.
- Rate limiting: 2/second; 120/minute; 500000/day
- Cache duration: 1800 second(s)

+ Parameters
  + query (string) - Text to be translated.


  + src_lang (string, optional) - Source language code (e.g., "pt" for Portuguese). If not provided, the language will be automatically detected.


  + dest_lang (string) - Destination language code (e.g., "en" for English).

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "translatedText": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## TikTok Video URL Scraper [/scrap-tiktok-video-url/?query={query}]
Scrapes TikTok video URL to get the media URL and thumbnail URL.
- Rate limiting: 2/second; 60/minute; 500000/day
- Cache duration: 14400 second(s)

+ Parameters
  + query (string) - TikTok video URL.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "filename": "string",
            "mediaUrl": "string",
            "thumbnailUrl": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## URL Parser [/url-parser/?query={query}]
Parse URL to get protocol, hostname, path, parameters, and fragment information.
- Rate limiting: 10/second; 300/minute; 1000000/day
- Cache duration: 1 second(s)

+ Parameters
  + query (string) - URL to be parsed.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "fragment": "string",
            "hostname": "string",
            "params": "dict",
            "path": "string",
            "protocol": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## User-Agent Parser [/useragent-parser/?query={query}]
Parse User-Agent string to get OS, browser, and device information. If no "query" parameter is provided, the User-Agent header will be used.
- Rate limiting: 10/second; 300/minute; 1000000/day
- Cache duration: 1 second(s)

+ Parameters
  + query (string, optional) - User-Agent string to be parsed.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "browser": {
              "family": "string",
              "version": "string",
              "versionString": "string"
            },
            "device": {
              "brand": "string",
              "family": "string",
              "model": "string"
            },
            "os": {
              "family": "string",
              "version": "string",
              "versionString": "string"
            },
            "uaString": "string"
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

## YouTube Video URL Scraper [/scrap-youtube-video-url/?query={query}]
Scrapes YouTube video URL to get all the available information about the video.
- Rate limiting: 2/second; 60/minute; 500000/day
- Cache duration: 14400 second(s)

+ Parameters
  + query (string) - YouTube video URL.

## Responses (GET) [GET]

+ Response 200 (application/json)

        {
          "api": {
            "elapsedTime": "float",
            "errorMessage": "None",
            "status": "True",
            "version": "str"
          },
          "response": {
            "info": {
              "channelId": "string",
              "channelName": "string",
              "channelUrl": "string",
              "commentCount": "integer",
              "formattedChannelName": "string",
              "formattedMediaDurationTime": "string",
              "formattedMediaTitle": "string",
              "likeCount": "integer",
              "mediaCategories": "list",
              "mediaDescription": "string",
              "mediaDurationTime": "integer",
              "mediaEmbedUrl": "string",
              "mediaId": "string",
              "mediaIsAgeRestringicted": "boolean",
              "mediaIsstringeaming": "boolean",
              "mediaShortUrl": "string",
              "mediaTags": "list",
              "mediaTitle": "string",
              "mediaUploadedAt": "integer",
              "mediaUrl": "string",
              "viewCount": "integer"
            },
            "media": {
              "audio": {
                "bitrate": "integer",
                "codec": "string",
                "samplerate": "integer",
                "size": "integer",
                "url": "string"
              },
              "subtitle": [
                {
                  "ext": "string",
                  "lang": "string",
                  "url": "string"
                }
              ],
              "video": {
                "bitrate": "integer",
                "codec": "string",
                "framerate": "integer",
                "quality": "integer",
                "url": "string"
              }
            }
          }
        }

+ Response 400 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }

+ Response 500 (application/json)

        {
          "api": {
            "elapsedTime": "None",
            "errorMessage": "str",
            "status": "False",
            "version": "str"
          },
          "response": {}
        }
